@using IEP.Web.Models.Auction

@model List<AuctionModel>

@{
	var list = Model;
}

<div class="container">
	<div class="row">
		@for (int i = 0; i < list.Count; i++)
		{
			<div class="col-md-3 col-sm-6">
				<div class="thumbnail text-center">
					<img src="~/Uploads/Images/@list.ElementAt(i).Img" style="max-width: 350px; max-height: 150px" />
					@Html.ActionLink(list.ElementAt(i).Name, "Details", "Auction", new { Id = list.ElementAt(i).Id }, new { @class = "product-title" })
					<p> Trenutna cena: @list.ElementAt(i).CurrentPrice @list.ElementAt(i).Currency</p>
					@if (@list.ElementAt(i).AuctionStatusId == 2)
					{
						<p class="demo" data-status="@list.ElementAt(i).AuctionStatusId" data-id="@list.ElementAt(i).Id" data-date="@list.ElementAt(i).ClosedDate.ToString("yyyy-MM-ddTHH:mm:ssZ")"> @list.ElementAt(i).OstaloVreme.ToString(@"hh\:mm\:ss") </p>
					}
					else
					{
						<p>EXPIRED</p>
					}
					
					
					@if (@list.ElementAt(i).AuctionStatusId == 2)
						{
							if (@list.ElementAt(i).AuctionBiderId != 0)
							{
								<h4><p class="label label-info">Ponuda: @list.ElementAt(i).AuctionBider</p></h4>
							}
							else
							{
								<h4><p class="label label-warning">Nema ponuda</p></h4>
							}

						}
						else
						{
							if (@list.ElementAt(i).AuctionBiderId != 0)
							{
								<h4><p class="label label-info">Pobednik: @list.ElementAt(i).AuctionBider</p></h4>
							}
							else
							{
								<h4><p class="label label-warning">Nema ponuda</p></h4>
							}
						}
						@if (@list.ElementAt(i).AuctionStatusId == 1)
						{
							<h3><p class="label label-default"> Status: @list.ElementAt(i).AuctionStatus</p></h3>
						}
						else if (@list.ElementAt(i).AuctionStatusId == 2)
						{
							<h3><p class="label label-success"> Status: @list.ElementAt(i).AuctionStatus</p></h3>
						}
						else
						{
							<h3><p class="label label-danger"> Status: @list.ElementAt(i).AuctionStatus</p></h3>
						}


						<hr class="line">
						@if (@list.ElementAt(i).AuctionStatusId == 2)
						{
							<div class="row">
								<div class="col-md-6 col-sm-6">
									<input id="TokenNum_@list.ElementAt(i).Id" type="number" class="form-control" value="@(list.ElementAt(i).CurrentPrice / list.ElementAt(i).TokenValue + 1)" min="@(list.ElementAt(i).CurrentPrice / list.ElementAt(i).TokenValue + 1)">
								</div>

								<div class="col-md-6 col-sm-6">
									<button class="btn btn-danger right" onclick="onBidNow(@list.ElementAt(i).Id)"> BID NOW</button>
								</div>

							</div>
						}
					</div>
			</div>

		}
	</div>
</div>

<script src="~/Scripts/jquery.signalR-2.4.0.js"></script>
<script src="~/signalR/hubs"></script>

<script type="text/javascript">
	var myHub = $.connection.myHub;
	// Setting logging to true so that we can see whats happening in the browser console log. [OPTIONAL]
	$.connection.hub.logging = true;
	// Start the hub
	$.connection.hub.start();

	$(document).ready(function () {
		//timer
		$(".demo").each(function (index) {
			var self = this;
			var indexA = $(self).data("id");
			var date = $(self).data("date");
			var status = $(self).data("status");
				var x = setInterval(function () {
					var countDownDate = new Date(date).getTime();
					// Get todays date and time
					var now = new Date().getTime() + 3600000;

					// Find the distance between now and the count down date
					var distance = countDownDate - now;

					// Time calculations for days, hours, minutes and seconds
					var hours = Math.floor(distance / (1000 * 60 * 60));
					var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
					var seconds = Math.floor((distance % (1000 * 60)) / 1000);

					if (hours < 10) hours = '0' + hours;
					if (minutes < 10) minutes = '0' + minutes;
					if (seconds < 10) seconds = '0' + seconds;

					// Display the result in the element with id="demo"
					$(self).text(hours + ":"
						+ minutes + ":" + seconds + "");

					// If the count down is finished, write some text
					if (distance < 0) {
						clearInterval(x);
						$(self).text("EXPIRED");
						if (status != 3) {
							changeStatus(indexA);
						}
					}
				}, 1000);
		});
	});

	function changeStatus(id) {

		$.ajax({
			url: '/Auction/ChangeStatus?id=' + id,
			method: 'GET',
			cache: false,
			success: function (data) {
				if (data.success) {

					myHub.server.loadall();
				}
				else {
					alert('NEUSPESNO');
				}

			}

		});


	}


    function onBidNow(id) {

		var TokenNum = $('#TokenNum_' + id).val();

         @if (User.Identity.IsAuthenticated)
		 {
             <text>
               $.ajax({
				   url: '/Auction/BidNow?productId=' + id + '&TokenNum=' + TokenNum ,
                   method: 'GET',
                   cache: false,
				   success: function (data) {
					   if (data.success) {
						   myHub.server.loadall();
						   myHub.server.reload(id);
						   Lobibox.notify('success', {
							   title: true,
							   size: 'normal',
							   soundPath: '/Sounds/',
							   showClass: 'flipInX',
							   hideClass: 'zoomOutDown',
							   icon: true,
							   msg: 'Uspesno postavljena ponuda!',
							   img: null,
							   closable: true,
							   delay:1000,
							   delayIndicator: true,
							   closeOnClick: true,
							   width: 400,
							   sound: true,
							   position: "top left"
						   });
					   }
					   else {
						   Lobibox.notify('error', {
							   title: true,
							   size: 'normal',
							   soundPath: '/Sounds/',
							   showClass: 'flipInX',
							   hideClass: 'zoomOutDown',
							   icon: true,
							   msg: 'Nemate dovoljno tokena!',
							   img: null,
							   closable: true,
							   delay: 2000,
							   delayIndicator: true,
							   closeOnClick: true,
							   width: 400,
							   sound: true,
							   position: "top left"
						   });
					   }

				   }

                });
            </text>
		 }
		 else
		 {
             <text>
                window.location.href = '/Account/Login';
            </text>
         }



	}







	// //Update the count down every 1 second
	//var x = setInterval(function () {
	//	var countDownDate = new Date("Jan 31, 2019 22:55:00").getTime();
	//	// Get todays date and time
	//	var now = new Date().getTime();

	//	// Find the distance between now and the count down date
	//	var distance = countDownDate - now;

	//	// Time calculations for days, hours, minutes and seconds
	//	var hours = Math.floor(distance / (1000 * 60 * 60));
	//	var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60));
	//	var seconds = Math.floor((distance % (1000 * 60)) / 1000);

	//	if (hours < 10) hours = '0' + hours;
	//	if (minutes < 10) minutes = '0' + minutes;
	//	if (seconds < 10) seconds = '0' + seconds;

	//	// Display the result in the element with id="demo"
	//	document.getElementById("demo").innerHTML = hours + " : "
	//		+ minutes + " : " + seconds + "";

	//	// If the count down is finished, write some text
	//	if (distance < 0) {
	//		clearInterval(x);
	//		document.getElementById("demo").innerHTML = "EXPIRED";
	//	}
	//}, 1000);

</script>


